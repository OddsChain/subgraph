// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BetWinnings_Claimed extends ethereum.Event {
  get params(): BetWinnings_Claimed__Params {
    return new BetWinnings_Claimed__Params(this);
  }
}

export class BetWinnings_Claimed__Params {
  _event: BetWinnings_Claimed;

  constructor(event: BetWinnings_Claimed) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get winnings(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Bet_Accepted extends ethereum.Event {
  get params(): Bet_Accepted__Params {
    return new Bet_Accepted__Params(this);
  }
}

export class Bet_Accepted__Params {
  _event: Bet_Accepted;

  constructor(event: Bet_Accepted) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get choice(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get validator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get betEndTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Bet_Denied extends ethereum.Event {
  get params(): Bet_Denied__Params {
    return new Bet_Denied__Params(this);
  }
}

export class Bet_Denied__Params {
  _event: Bet_Denied;

  constructor(event: Bet_Denied) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get choice(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get validator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Bet_Joined extends ethereum.Event {
  get params(): Bet_Joined__Params {
    return new Bet_Joined__Params(this);
  }
}

export class Bet_Joined__Params {
  _event: Bet_Joined;

  constructor(event: Bet_Joined) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get participants(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get yesPool(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get noPool(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalPool(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get yesParticipants(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get noParticipants(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Bet_Refunded extends ethereum.Event {
  get params(): Bet_Refunded__Params {
    return new Bet_Refunded__Params(this);
  }
}

export class Bet_Refunded__Params {
  _event: Bet_Refunded;

  constructor(event: Bet_Refunded) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get refundAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Bet_Validated extends ethereum.Event {
  get params(): Bet_Validated__Params {
    return new Bet_Validated__Params(this);
  }
}

export class Bet_Validated__Params {
  _event: Bet_Validated;

  constructor(event: Bet_Validated) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get outcome(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get validator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get claimWaitTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get validationCount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SingleBet_Created extends ethereum.Event {
  get params(): SingleBet_Created__Params {
    return new SingleBet_Created__Params(this);
  }
}

export class SingleBet_Created__Params {
  _event: SingleBet_Created;

  constructor(event: SingleBet_Created) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get betType(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get betEndTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get validators(): Array<Address> {
    return this._event.parameters[5].value.toAddressArray();
  }
}

export class ValidatorReportDecided extends ethereum.Event {
  get params(): ValidatorReportDecided__Params {
    return new ValidatorReportDecided__Params(this);
  }
}

export class ValidatorReportDecided__Params {
  _event: ValidatorReportDecided;

  constructor(event: ValidatorReportDecided) {
    this._event = event;
  }

  get reportOutcome(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get betID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Validator_Assigned extends ethereum.Event {
  get params(): Validator_Assigned__Params {
    return new Validator_Assigned__Params(this);
  }
}

export class Validator_Assigned__Params {
  _event: Validator_Assigned;

  constructor(event: Validator_Assigned) {
    this._event = event;
  }

  get betID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get betType(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get randomNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get validator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Validator_Joined extends ethereum.Event {
  get params(): Validator_Joined__Params {
    return new Validator_Joined__Params(this);
  }
}

export class Validator_Joined__Params {
  _event: Validator_Joined;

  constructor(event: Validator_Joined) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Validator_Reported extends ethereum.Event {
  get params(): Validator_Reported__Params {
    return new Validator_Reported__Params(this);
  }
}

export class Validator_Reported__Params {
  _event: Validator_Reported;

  constructor(event: Validator_Reported) {
    this._event = event;
  }

  get reporter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get betID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class supportValidator extends ethereum.Event {
  get params(): supportValidator__Params {
    return new supportValidator__Params(this);
  }
}

export class supportValidator__Params {
  _event: supportValidator;

  constructor(event: supportValidator) {
    this._event = event;
  }

  get choice(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get betID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get support(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get oppose(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Odd___singleBetDetailsResultBetStatisticsStruct extends ethereum.Tuple {
  get yesPool(): BigInt {
    return this[0].toBigInt();
  }

  get noPool(): BigInt {
    return this[1].toBigInt();
  }

  get totalPool(): BigInt {
    return this[2].toBigInt();
  }

  get yesPartcipants(): BigInt {
    return this[3].toBigInt();
  }

  get noParticipants(): BigInt {
    return this[4].toBigInt();
  }

  get yesOutcomeCount(): BigInt {
    return this[5].toBigInt();
  }

  get noOutcomeCount(): BigInt {
    return this[6].toBigInt();
  }
}

export class Odd___singleBetDetailsResultBetReportStruct extends ethereum.Tuple {
  get reporter(): Address {
    return this[0].toAddress();
  }

  get maliciousValidator(): Address {
    return this[1].toAddress();
  }

  get betId(): BigInt {
    return this[2].toBigInt();
  }

  get description(): string {
    return this[3].toString();
  }

  get currentlyChallenged(): boolean {
    return this[4].toBoolean();
  }

  get support(): BigInt {
    return this[5].toBigInt();
  }

  get oppose(): BigInt {
    return this[6].toBigInt();
  }

  get reportOutcome(): BigInt {
    return this[7].toBigInt();
  }
}

export class Odd___singleBetDetailsResult {
  value0: BigInt;
  value1: string;
  value2: boolean;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: Odd___singleBetDetailsResultBetStatisticsStruct;
  value11: Odd___singleBetDetailsResultBetReportStruct;

  constructor(
    value0: BigInt,
    value1: string,
    value2: boolean,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: Odd___singleBetDetailsResultBetStatisticsStruct,
    value11: Odd___singleBetDetailsResultBetReportStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromTuple(this.value10));
    map.set("value11", ethereum.Value.fromTuple(this.value11));
    return map;
  }

  getBetID(): BigInt {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getBetType(): boolean {
    return this.value2;
  }

  getCreator(): Address {
    return this.value3;
  }

  getBetEndTime(): BigInt {
    return this.value4;
  }

  getOutcome(): BigInt {
    return this.value5;
  }

  getAccepted(): boolean {
    return this.value6;
  }

  getValidationCount(): BigInt {
    return this.value7;
  }

  getClaimWaitTime(): BigInt {
    return this.value8;
  }

  getToBeSetTime(): BigInt {
    return this.value9;
  }

  getBetStatistics(): Odd___singleBetDetailsResultBetStatisticsStruct {
    return this.value10;
  }

  getBetReport(): Odd___singleBetDetailsResultBetReportStruct {
    return this.value11;
  }
}

export class Odd___userDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalWinnings(): BigInt {
    return this.value0;
  }

  getTotalBetsParticipated(): BigInt {
    return this.value1;
  }

  getBalance(): BigInt {
    return this.value2;
  }
}

export class Odd___validatorsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getValidatorId(): BigInt {
    return this.value0;
  }

  getValidator(): Address {
    return this.value1;
  }

  getBetsRejected(): BigInt {
    return this.value2;
  }

  getBetsAccepted(): BigInt {
    return this.value3;
  }

  getBetsValidated(): BigInt {
    return this.value4;
  }

  getTotalReports(): BigInt {
    return this.value5;
  }

  getBalance(): BigInt {
    return this.value6;
  }
}

export class Odd__getUserDetailsResultValue0Struct extends ethereum.Tuple {
  get totalWinnings(): BigInt {
    return this[0].toBigInt();
  }

  get totalBetsParticipated(): BigInt {
    return this[1].toBigInt();
  }

  get balance(): BigInt {
    return this[2].toBigInt();
  }
}

export class Odd extends ethereum.SmartContract {
  static bind(address: Address): Odd {
    return new Odd("Odd", address);
  }

  CLAIM_WINNING_WAIT_TIME(): BigInt {
    let result = super.call(
      "CLAIM_WINNING_WAIT_TIME",
      "CLAIM_WINNING_WAIT_TIME():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CLAIM_WINNING_WAIT_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CLAIM_WINNING_WAIT_TIME",
      "CLAIM_WINNING_WAIT_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VALIDATOR_STAKE_AMOUNT(): BigInt {
    let result = super.call(
      "VALIDATOR_STAKE_AMOUNT",
      "VALIDATOR_STAKE_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_VALIDATOR_STAKE_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VALIDATOR_STAKE_AMOUNT",
      "VALIDATOR_STAKE_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _canValidate(param0: Address): boolean {
    let result = super.call("_canValidate", "_canValidate(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__canValidate(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_canValidate", "_canValidate(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _hasValidated(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "_hasValidated",
      "_hasValidated(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try__hasValidated(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_hasValidated",
      "_hasValidated(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _hasVoted(param0: Address, param1: BigInt): boolean {
    let result = super.call("_hasVoted", "_hasVoted(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try__hasVoted(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_hasVoted",
      "_hasVoted(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _isValidator(param0: Address): boolean {
    let result = super.call("_isValidator", "_isValidator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__isValidator(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_isValidator", "_isValidator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _refundClaimed(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "_refundClaimed",
      "_refundClaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try__refundClaimed(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_refundClaimed",
      "_refundClaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _singleBetClaimed(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "_singleBetClaimed",
      "_singleBetClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try__singleBetClaimed(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_singleBetClaimed",
      "_singleBetClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _singleBetDetails(param0: BigInt): Odd___singleBetDetailsResult {
    let result = super.call(
      "_singleBetDetails",
      "_singleBetDetails(uint256):(uint256,string,bool,address,uint256,uint256,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,address,uint256,string,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Odd___singleBetDetailsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBoolean(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      changetype<Odd___singleBetDetailsResultBetStatisticsStruct>(
        result[10].toTuple()
      ),
      changetype<Odd___singleBetDetailsResultBetReportStruct>(
        result[11].toTuple()
      )
    );
  }

  try__singleBetDetails(
    param0: BigInt
  ): ethereum.CallResult<Odd___singleBetDetailsResult> {
    let result = super.tryCall(
      "_singleBetDetails",
      "_singleBetDetails(uint256):(uint256,string,bool,address,uint256,uint256,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(address,address,uint256,string,bool,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Odd___singleBetDetailsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBoolean(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        changetype<Odd___singleBetDetailsResultBetStatisticsStruct>(
          value[10].toTuple()
        ),
        changetype<Odd___singleBetDetailsResultBetReportStruct>(
          value[11].toTuple()
        )
      )
    );
  }

  _userBetAmount(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "_userBetAmount",
      "_userBetAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try__userBetAmount(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_userBetAmount",
      "_userBetAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _userBetChoice(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "_userBetChoice",
      "_userBetChoice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try__userBetChoice(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_userBetChoice",
      "_userBetChoice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _userDetails(param0: Address): Odd___userDetailsResult {
    let result = super.call(
      "_userDetails",
      "_userDetails(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Odd___userDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try__userDetails(
    param0: Address
  ): ethereum.CallResult<Odd___userDetailsResult> {
    let result = super.tryCall(
      "_userDetails",
      "_userDetails(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Odd___userDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  _userParticipation(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "_userParticipation",
      "_userParticipation(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try__userParticipation(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_userParticipation",
      "_userParticipation(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _validators(param0: Address): Odd___validatorsResult {
    let result = super.call(
      "_validators",
      "_validators(address):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Odd___validatorsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try__validators(
    param0: Address
  ): ethereum.CallResult<Odd___validatorsResult> {
    let result = super.tryCall(
      "_validators",
      "_validators(address):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Odd___validatorsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  deployer(): Address {
    let result = super.call("deployer", "deployer():(address)", []);

    return result[0].toAddress();
  }

  try_deployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("deployer", "deployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  destinationAddress(): string {
    let result = super.call(
      "destinationAddress",
      "destinationAddress():(string)",
      []
    );

    return result[0].toString();
  }

  try_destinationAddress(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "destinationAddress",
      "destinationAddress():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  destinationChain(): string {
    let result = super.call(
      "destinationChain",
      "destinationChain():(string)",
      []
    );

    return result[0].toString();
  }

  try_destinationChain(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "destinationChain",
      "destinationChain():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  estimatedCrossChainGasAmount(): BigInt {
    let result = super.call(
      "estimatedCrossChainGasAmount",
      "estimatedCrossChainGasAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedCrossChainGasAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedCrossChainGasAmount",
      "estimatedCrossChainGasAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasService(): Address {
    let result = super.call("gasService", "gasService():(address)", []);

    return result[0].toAddress();
  }

  try_gasService(): ethereum.CallResult<Address> {
    let result = super.tryCall("gasService", "gasService():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gateway(): Address {
    let result = super.call("gateway", "gateway():(address)", []);

    return result[0].toAddress();
  }

  try_gateway(): ethereum.CallResult<Address> {
    let result = super.tryCall("gateway", "gateway():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTimeStamp(): BigInt {
    let result = super.call(
      "getCurrentTimeStamp",
      "getCurrentTimeStamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTimeStamp",
      "getCurrentTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIsValidator(_user: Address): boolean {
    let result = super.call(
      "getIsValidator",
      "getIsValidator(address):(bool)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBoolean();
  }

  try_getIsValidator(_user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsValidator",
      "getIsValidator(address):(bool)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getIsWinner(_betID: BigInt, _user: Address): boolean {
    let result = super.call(
      "getIsWinner",
      "getIsWinner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBoolean();
  }

  try_getIsWinner(
    _betID: BigInt,
    _user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getIsWinner",
      "getIsWinner(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRequiredNumberOfValidators(): BigInt {
    let result = super.call(
      "getRequiredNumberOfValidators",
      "getRequiredNumberOfValidators():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRequiredNumberOfValidators(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequiredNumberOfValidators",
      "getRequiredNumberOfValidators():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserDetails(_user: Address): Odd__getUserDetailsResultValue0Struct {
    let result = super.call(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_user)]
    );

    return changetype<Odd__getUserDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserDetails(
    _user: Address
  ): ethereum.CallResult<Odd__getUserDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Odd__getUserDetailsResultValue0Struct>(value[0].toTuple())
    );
  }

  getUserOddsBalance(_user: Address): BigInt {
    let result = super.call(
      "getUserOddsBalance",
      "getUserOddsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getUserOddsBalance(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserOddsBalance",
      "getUserOddsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPossibleRewards(
    _amount: BigInt,
    _betID: BigInt,
    _user: Address,
    _choice: BigInt
  ): BigInt {
    let result = super.call(
      "getUserPossibleRewards",
      "getUserPossibleRewards(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_choice)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserPossibleRewards(
    _amount: BigInt,
    _betID: BigInt,
    _user: Address,
    _choice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPossibleRewards",
      "getUserPossibleRewards(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_choice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStakeAmount(_user: Address, _betID: BigInt): BigInt {
    let result = super.call(
      "getUserStakeAmount",
      "getUserStakeAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_betID)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserStakeAmount(
    _user: Address,
    _betID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserStakeAmount",
      "getUserStakeAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_betID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserWinnings(_betID: BigInt, _user: Address): BigInt {
    let result = super.call(
      "getUserWinnings",
      "getUserWinnings(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserWinnings(
    _betID: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserWinnings",
      "getUserWinnings(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_betID),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValidators(_betID: BigInt): Array<Address> {
    let result = super.call(
      "getValidators",
      "getValidators(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_betID)]
    );

    return result[0].toAddressArray();
  }

  try_getValidators(_betID: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getValidators",
      "getValidators(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_betID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  hasVoted(_betID: BigInt): boolean {
    let result = super.call("hasVoted", "hasVoted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_betID)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(_betID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_betID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oddsTokenAddress(): Address {
    let result = super.call(
      "oddsTokenAddress",
      "oddsTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_oddsTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oddsTokenAddress",
      "oddsTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  singleBetIDCounter(): BigInt {
    let result = super.call(
      "singleBetIDCounter",
      "singleBetIDCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_singleBetIDCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "singleBetIDCounter",
      "singleBetIDCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validators(param0: BigInt): Address {
    let result = super.call("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_validators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gasReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _oddsTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _destinationAddress(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _estimatedCrossChainGasAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOrDenyBetCall extends ethereum.Call {
  get inputs(): AcceptOrDenyBetCall__Inputs {
    return new AcceptOrDenyBetCall__Inputs(this);
  }

  get outputs(): AcceptOrDenyBetCall__Outputs {
    return new AcceptOrDenyBetCall__Outputs(this);
  }
}

export class AcceptOrDenyBetCall__Inputs {
  _call: AcceptOrDenyBetCall;

  constructor(call: AcceptOrDenyBetCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _choice(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AcceptOrDenyBetCall__Outputs {
  _call: AcceptOrDenyBetCall;

  constructor(call: AcceptOrDenyBetCall) {
    this._call = call;
  }
}

export class ClaimBetRefundCall extends ethereum.Call {
  get inputs(): ClaimBetRefundCall__Inputs {
    return new ClaimBetRefundCall__Inputs(this);
  }

  get outputs(): ClaimBetRefundCall__Outputs {
    return new ClaimBetRefundCall__Outputs(this);
  }
}

export class ClaimBetRefundCall__Inputs {
  _call: ClaimBetRefundCall;

  constructor(call: ClaimBetRefundCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimBetRefundCall__Outputs {
  _call: ClaimBetRefundCall;

  constructor(call: ClaimBetRefundCall) {
    this._call = call;
  }
}

export class ClaimSingleBetWinningsCall extends ethereum.Call {
  get inputs(): ClaimSingleBetWinningsCall__Inputs {
    return new ClaimSingleBetWinningsCall__Inputs(this);
  }

  get outputs(): ClaimSingleBetWinningsCall__Outputs {
    return new ClaimSingleBetWinningsCall__Outputs(this);
  }
}

export class ClaimSingleBetWinningsCall__Inputs {
  _call: ClaimSingleBetWinningsCall;

  constructor(call: ClaimSingleBetWinningsCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimSingleBetWinningsCall__Outputs {
  _call: ClaimSingleBetWinningsCall;

  constructor(call: ClaimSingleBetWinningsCall) {
    this._call = call;
  }
}

export class CreateSingleBetCall extends ethereum.Call {
  get inputs(): CreateSingleBetCall__Inputs {
    return new CreateSingleBetCall__Inputs(this);
  }

  get outputs(): CreateSingleBetCall__Outputs {
    return new CreateSingleBetCall__Outputs(this);
  }
}

export class CreateSingleBetCall__Inputs {
  _call: CreateSingleBetCall;

  constructor(call: CreateSingleBetCall) {
    this._call = call;
  }

  get _createSingleBetParams(): CreateSingleBetCall_createSingleBetParamsStruct {
    return changetype<CreateSingleBetCall_createSingleBetParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateSingleBetCall__Outputs {
  _call: CreateSingleBetCall;

  constructor(call: CreateSingleBetCall) {
    this._call = call;
  }
}

export class CreateSingleBetCall_createSingleBetParamsStruct extends ethereum.Tuple {
  get description(): string {
    return this[0].toString();
  }

  get betType(): boolean {
    return this[1].toBoolean();
  }

  get betEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get validators(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get commandId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceChain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteWithTokenCall extends ethereum.Call {
  get inputs(): ExecuteWithTokenCall__Inputs {
    return new ExecuteWithTokenCall__Inputs(this);
  }

  get outputs(): ExecuteWithTokenCall__Outputs {
    return new ExecuteWithTokenCall__Outputs(this);
  }
}

export class ExecuteWithTokenCall__Inputs {
  _call: ExecuteWithTokenCall;

  constructor(call: ExecuteWithTokenCall) {
    this._call = call;
  }

  get commandId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceChain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ExecuteWithTokenCall__Outputs {
  _call: ExecuteWithTokenCall;

  constructor(call: ExecuteWithTokenCall) {
    this._call = call;
  }
}

export class FundAccountCall extends ethereum.Call {
  get inputs(): FundAccountCall__Inputs {
    return new FundAccountCall__Inputs(this);
  }

  get outputs(): FundAccountCall__Outputs {
    return new FundAccountCall__Outputs(this);
  }
}

export class FundAccountCall__Inputs {
  _call: FundAccountCall;

  constructor(call: FundAccountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundAccountCall__Outputs {
  _call: FundAccountCall;

  constructor(call: FundAccountCall) {
    this._call = call;
  }
}

export class JoinSingleBetCall extends ethereum.Call {
  get inputs(): JoinSingleBetCall__Inputs {
    return new JoinSingleBetCall__Inputs(this);
  }

  get outputs(): JoinSingleBetCall__Outputs {
    return new JoinSingleBetCall__Outputs(this);
  }
}

export class JoinSingleBetCall__Inputs {
  _call: JoinSingleBetCall;

  constructor(call: JoinSingleBetCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _choice(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class JoinSingleBetCall__Outputs {
  _call: JoinSingleBetCall;

  constructor(call: JoinSingleBetCall) {
    this._call = call;
  }
}

export class JoinValidatorsCall extends ethereum.Call {
  get inputs(): JoinValidatorsCall__Inputs {
    return new JoinValidatorsCall__Inputs(this);
  }

  get outputs(): JoinValidatorsCall__Outputs {
    return new JoinValidatorsCall__Outputs(this);
  }
}

export class JoinValidatorsCall__Inputs {
  _call: JoinValidatorsCall;

  constructor(call: JoinValidatorsCall) {
    this._call = call;
  }
}

export class JoinValidatorsCall__Outputs {
  _call: JoinValidatorsCall;

  constructor(call: JoinValidatorsCall) {
    this._call = call;
  }
}

export class ReportValidatorCall extends ethereum.Call {
  get inputs(): ReportValidatorCall__Inputs {
    return new ReportValidatorCall__Inputs(this);
  }

  get outputs(): ReportValidatorCall__Outputs {
    return new ReportValidatorCall__Outputs(this);
  }
}

export class ReportValidatorCall__Inputs {
  _call: ReportValidatorCall;

  constructor(call: ReportValidatorCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ReportValidatorCall__Outputs {
  _call: ReportValidatorCall;

  constructor(call: ReportValidatorCall) {
    this._call = call;
  }
}

export class UpdateDestinationAddressCall extends ethereum.Call {
  get inputs(): UpdateDestinationAddressCall__Inputs {
    return new UpdateDestinationAddressCall__Inputs(this);
  }

  get outputs(): UpdateDestinationAddressCall__Outputs {
    return new UpdateDestinationAddressCall__Outputs(this);
  }
}

export class UpdateDestinationAddressCall__Inputs {
  _call: UpdateDestinationAddressCall;

  constructor(call: UpdateDestinationAddressCall) {
    this._call = call;
  }

  get _destinationAddress(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateDestinationAddressCall__Outputs {
  _call: UpdateDestinationAddressCall;

  constructor(call: UpdateDestinationAddressCall) {
    this._call = call;
  }
}

export class ValidateBetCall extends ethereum.Call {
  get inputs(): ValidateBetCall__Inputs {
    return new ValidateBetCall__Inputs(this);
  }

  get outputs(): ValidateBetCall__Outputs {
    return new ValidateBetCall__Outputs(this);
  }
}

export class ValidateBetCall__Inputs {
  _call: ValidateBetCall;

  constructor(call: ValidateBetCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _outcome(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ValidateBetCall__Outputs {
  _call: ValidateBetCall;

  constructor(call: ValidateBetCall) {
    this._call = call;
  }
}

export class VoteValidatorCall extends ethereum.Call {
  get inputs(): VoteValidatorCall__Inputs {
    return new VoteValidatorCall__Inputs(this);
  }

  get outputs(): VoteValidatorCall__Outputs {
    return new VoteValidatorCall__Outputs(this);
  }
}

export class VoteValidatorCall__Inputs {
  _call: VoteValidatorCall;

  constructor(call: VoteValidatorCall) {
    this._call = call;
  }

  get _betID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _choice(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteValidatorCall__Outputs {
  _call: VoteValidatorCall;

  constructor(call: VoteValidatorCall) {
    this._call = call;
  }
}

export class WithdrawAllFundsCall extends ethereum.Call {
  get inputs(): WithdrawAllFundsCall__Inputs {
    return new WithdrawAllFundsCall__Inputs(this);
  }

  get outputs(): WithdrawAllFundsCall__Outputs {
    return new WithdrawAllFundsCall__Outputs(this);
  }
}

export class WithdrawAllFundsCall__Inputs {
  _call: WithdrawAllFundsCall;

  constructor(call: WithdrawAllFundsCall) {
    this._call = call;
  }
}

export class WithdrawAllFundsCall__Outputs {
  _call: WithdrawAllFundsCall;

  constructor(call: WithdrawAllFundsCall) {
    this._call = call;
  }
}

export class WithdrawFromAccountCall extends ethereum.Call {
  get inputs(): WithdrawFromAccountCall__Inputs {
    return new WithdrawFromAccountCall__Inputs(this);
  }

  get outputs(): WithdrawFromAccountCall__Outputs {
    return new WithdrawFromAccountCall__Outputs(this);
  }
}

export class WithdrawFromAccountCall__Inputs {
  _call: WithdrawFromAccountCall;

  constructor(call: WithdrawFromAccountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromAccountCall__Outputs {
  _call: WithdrawFromAccountCall;

  constructor(call: WithdrawFromAccountCall) {
    this._call = call;
  }
}
