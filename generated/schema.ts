// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get betID(): BigInt {
    let value = this.get("betID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set betID(value: BigInt) {
    this.set("betID", Value.fromBigInt(value));
  }

  get betDescription(): string {
    let value = this.get("betDescription");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set betDescription(value: string) {
    this.set("betDescription", Value.fromString(value));
  }

  get betType(): boolean {
    let value = this.get("betType");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set betType(value: boolean) {
    this.set("betType", Value.fromBoolean(value));
  }

  get validators(): BigInt | null {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set validators(value: BigInt | null) {
    if (!value) {
      this.unset("validators");
    } else {
      this.set("validators", Value.fromBigInt(<BigInt>value));
    }
  }

  get validator(): Bytes | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromBytes(<Bytes>value));
    }
  }

  get participants(): BigInt | null {
    let value = this.get("participants");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set participants(value: BigInt | null) {
    if (!value) {
      this.unset("participants");
    } else {
      this.set("participants", Value.fromBigInt(<BigInt>value));
    }
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get endTime(): BigInt | null {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt | null) {
    if (!value) {
      this.unset("endTime");
    } else {
      this.set("endTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get outCome(): BigInt | null {
    let value = this.get("outCome");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outCome(value: BigInt | null) {
    if (!value) {
      this.unset("outCome");
    } else {
      this.set("outCome", Value.fromBigInt(<BigInt>value));
    }
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get validationCount(): BigInt | null {
    let value = this.get("validationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set validationCount(value: BigInt | null) {
    if (!value) {
      this.unset("validationCount");
    } else {
      this.set("validationCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get claimWaitTime(): BigInt | null {
    let value = this.get("claimWaitTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set claimWaitTime(value: BigInt | null) {
    if (!value) {
      this.unset("claimWaitTime");
    } else {
      this.set("claimWaitTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get toBeSetTime(): BigInt | null {
    let value = this.get("toBeSetTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set toBeSetTime(value: BigInt | null) {
    if (!value) {
      this.unset("toBeSetTime");
    } else {
      this.set("toBeSetTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get yesPool(): BigInt | null {
    let value = this.get("yesPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set yesPool(value: BigInt | null) {
    if (!value) {
      this.unset("yesPool");
    } else {
      this.set("yesPool", Value.fromBigInt(<BigInt>value));
    }
  }

  get noPool(): BigInt | null {
    let value = this.get("noPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set noPool(value: BigInt | null) {
    if (!value) {
      this.unset("noPool");
    } else {
      this.set("noPool", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalPool(): BigInt | null {
    let value = this.get("totalPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalPool(value: BigInt | null) {
    if (!value) {
      this.unset("totalPool");
    } else {
      this.set("totalPool", Value.fromBigInt(<BigInt>value));
    }
  }

  get yesParticipants(): BigInt | null {
    let value = this.get("yesParticipants");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set yesParticipants(value: BigInt | null) {
    if (!value) {
      this.unset("yesParticipants");
    } else {
      this.set("yesParticipants", Value.fromBigInt(<BigInt>value));
    }
  }

  get noParticipants(): BigInt | null {
    let value = this.get("noParticipants");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set noParticipants(value: BigInt | null) {
    if (!value) {
      this.unset("noParticipants");
    } else {
      this.set("noParticipants", Value.fromBigInt(<BigInt>value));
    }
  }

  get reporter(): Bytes | null {
    let value = this.get("reporter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reporter(value: Bytes | null) {
    if (!value) {
      this.unset("reporter");
    } else {
      this.set("reporter", Value.fromBytes(<Bytes>value));
    }
  }

  get maliciousValidator(): Bytes | null {
    let value = this.get("maliciousValidator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set maliciousValidator(value: Bytes | null) {
    if (!value) {
      this.unset("maliciousValidator");
    } else {
      this.set("maliciousValidator", Value.fromBytes(<Bytes>value));
    }
  }

  get reportDescription(): string | null {
    let value = this.get("reportDescription");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reportDescription(value: string | null) {
    if (!value) {
      this.unset("reportDescription");
    } else {
      this.set("reportDescription", Value.fromString(<string>value));
    }
  }

  get currentlyChallenged(): boolean {
    let value = this.get("currentlyChallenged");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set currentlyChallenged(value: boolean) {
    this.set("currentlyChallenged", Value.fromBoolean(value));
  }

  get support(): BigInt | null {
    let value = this.get("support");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set support(value: BigInt | null) {
    if (!value) {
      this.unset("support");
    } else {
      this.set("support", Value.fromBigInt(<BigInt>value));
    }
  }

  get oppose(): BigInt | null {
    let value = this.get("oppose");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set oppose(value: BigInt | null) {
    if (!value) {
      this.unset("oppose");
    } else {
      this.set("oppose", Value.fromBigInt(<BigInt>value));
    }
  }

  get reportOutcome(): BigInt | null {
    let value = this.get("reportOutcome");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set reportOutcome(value: BigInt | null) {
    if (!value) {
      this.unset("reportOutcome");
    } else {
      this.set("reportOutcome", Value.fromBigInt(<BigInt>value));
    }
  }
}
